<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Horse_Tracker"
   author="Proeliator"
   id="1a51e592868f18f275a46619"
   language="Lua"
   purpose="Track the success/failure of horse usage"
   date_written="2022-11-21 10:05:30"
   save_state="y"
   requires="5.06"
   version="3.0"
   >
</plugin>

<triggers>
  <trigger
   enabled="n"
   keep_evaluating="y"
   match="^(?P<HorseName>.*) the (?P<HorseColour>.*) horse.$"
   omit_from_output="y"
   sequence="1"
   regexp="y"
   script="ID_Horse"
   name="HorseName"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="^(?:> )?You hand (.+ )?the (.+) horse over to the stablehands\.$"
   omit_from_output="n"
   sequence="18"
   regexp="y"
   script="StableHorse"
   name="Horse_Stabled"
  >
  </trigger>

 <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(?:> )?You pay the stablehands .+ and (?:they bring |one of them leaves to fetch your)(?:(.+)? the)? (.+) (?:horse out of the stalls for you\.|(?:mare|stallion|gelding) for you\.)$"
   omit_from_output="n"
   sequence="18"
   regexp="y"
   script="StableHorse"
   name="Horse_Destabled"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="^(?:> )?You rename (?:.+ )?the (.+) horse as (?P<HorseName>.+)\.$$"
   omit_from_output="n"
   sequence="18"
   regexp="y"
   script="NameMyHorse"
   name="Horse_Named"
  >
  </trigger>

 <trigger
   enabled="y"
   keep_evaluating="y"
   match="^(?:> )?You remove (.+) the (.+) horse's name, leaving .+ anonymous once more\.$"
   omit_from_output="n"
   sequence="18"
   regexp="y"
   script="NameMyHorse"
   name="Horse_Denamed"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="15"
   keep_evaluating="y"
   match="^(?:> )?(You mount(?: )?(.+)? the (.+) horse\.|You take two steps back, then run towards .* horse and hop onto .* back.)$"
   omit_from_output="n"
   sequence="18"
   regexp="y"
   script="HorseHandler"
   name="mountsuccess"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="7"
   keep_evaluating="y"
   match="^(?:> )?You try to climb onto(?: )?(.+)? the (.+) horse, but .+ easily shakes you off and you land with a thump on the ground\.$"
   omit_from_output="n"
   sequence="19"
   regexp="y"
   script="HorseHandler"
   name="mountfail"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="15"
   keep_evaluating="y"
   match="^(?:> )?You (?:stash|retrieve) .+(?:in|from)(?: )?(.+)? the (.+) horse's pair of(?: .+)? saddlebags\.$"
   omit_from_output="n"
   sequence="20"
   regexp="y"
   script="HorseHandler"
   name="stashsuccess"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="7"
   keep_evaluating="y"
   match="^(?:> )?You try to access(?: )?(.+)? the (.+) horse's saddlebag and promptly get kicked for your trouble\.$"
   omit_from_output="n"
   sequence="21"
   regexp="y"
   script="HorseHandler"
   name="stashfail"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="7"
   keep_evaluating="y"
   match="^(?:> )?You try to convince(?: )?(.+)? the (.+) horse to follow you, but .+ is having none of it\.$"
   omit_from_output="n"
   sequence="22"
   regexp="y"
   script="HorseHandler"
   name="leadfail"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="15"
   keep_evaluating="y"
   match="^(?:> )?([^([:]+)?(?: the|The) (.+) horse starts to follow you\.$"
   omit_from_output="n"
   sequence="23"
   regexp="y"
   script="HorseHandler"
   name="leadsuccess"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="15"
   keep_evaluating="y"
   match="^(?:> )?You dress(?: )?(.+)? the (.+) horse with .+\.$"
   omit_from_output="n"
   sequence="23"
   regexp="y"
   script="HorseHandler"
   name="dresssuccess"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="7"
   keep_evaluating="y"
   match="^(?:> )?You try to dress(?: )?(.+)? the (.+) horse with .+$"
   omit_from_output="n"
   sequence="23"
   regexp="y"
   script="HorseHandler"
   name="dressfail"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="15"
   keep_evaluating="y"
   match="^(?:> )?You approach(?: )?(.+)? the (.+) horse, preparing to groom .+$"
   omit_from_output="n"
   sequence="23"
   regexp="y"
   script="HorseHandler"
   name="groomsuccess"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="7"
   keep_evaluating="y"
   match="^(?:> )?You pick out a brush and have a go at(?: )?(.+)? the (.+) horse's .+ with it\.$"
   omit_from_output="n"
   sequence="23"
   regexp="y"
   script="HorseHandler"
   name="groomfail"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="7"
   keep_evaluating="y"
   match="^(?:> )?You mess up the rhythm of your riding and are promptly tossed off(?: )?(.+)? the (.+) horse onto the ground\.$"
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="falloff"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="7"
   keep_evaluating="y"
   match="^(?:> )?As you ride(?: )?(.+)? the (.+) through the door, you strike your head hard on the doorframe and are sent tumbling out of the saddle\.$"
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="doorframe"
  >
  </trigger>

<trigger
   enabled="y"
   custom_colour="7"
   keep_evaluating="y"
   match="^(?:> )?([^([:]+ )?(?:the|The) (.+) horse seems to get bored of following you and wanders off\.$"
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="wanderoff"
  >
  </trigger>
	
<trigger
   enabled="y"
   keep_evaluating="y"
   match="^(?:> )?You tell(?: )?(.+)? the (.+) horse to take you to .+ and .+ starts off at a trot\.$"
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="ridesuccess"
  >
  </trigger>
	
<trigger
   enabled="y"
   keep_evaluating="y"
   match="^(?:> )?You tell(?: )?(.+)? the (.+) horse to take you to .+, but .+ seems unwilling to move\.$"
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="ridefail"
  >
  </trigger>	

<trigger
   enabled="y"
   keep_evaluating="y"
   match="^(?:> )?(?:[^(>\[])(?:[^:]+) you, (?:almost|slightly) unseating you from(?: )?(.+)? the (.+) (?:horse\.|horse before you regain your balance\.)$"
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="tipsuccess"
  >
  </trigger>	
	
<trigger
   enabled="y"
   keep_evaluating="y"
   match="^(?:> )?(?:[^(>\[])(?:[^:]+) off(?: )?(.+)? the (.+) horse, sending you crashing to the ground\.$"
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="tipfail"
  >
  </trigger>	
	
<trigger
   enabled="y"
   custom_colour="7"
   keep_evaluating="y"
   match="^(?:> )?The jolt knocks .+ off(?: )?(.+)? the (.+) horse's pack saddle\.$"
   omit_from_output="n"
   sequence="24"
   regexp="y"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="n"
   match="^(?:> )?You hunch down over(?: )?(.+)? the (.+) horse and spur .+ into a (\w*) at the .+$"
   omit_from_output="n"
   sequence="25"
   regexp="y"
   script="HorseChargeHandler"
   name="chargesuccess"
  >
  </trigger>
	
<trigger
   enabled="y"
   keep_evaluating="n"
   match="^(?:> )?You hunch down over(?: )?(.+)? the (.+) horse and try to spur .+ into a (\w*) at the .+$"
   omit_from_output="n"
   sequence="26"
   regexp="y"
   script="HorseChargeHandler"
   name="chargefail"
  >
  </trigger>
</triggers>

<!--  Aliases  -->
<aliases>

  <alias
   script="StableShowList"
   match="Stable List"
   enabled="y"
   ignore_case="y"
   omit_from_output="n"
   sequence="10"
  >
  </alias>

  <alias
   script="HorseNameFinder"
   match="ID Mount"
   enabled="y"
   ignore_case="y"
   omit_from_output="n"
   sequence="10"
  >
  </alias>

  <alias
   script="MyHorseStats"
   match="^(Horse Stats|Horse Stats (?P<Player>.*))$"
   enabled="y"
   ignore_case="y"
   regexp="y"
   sequence="30"
  >
  </alias>

  <alias
   script="MyHorseStatsResetAll"
   match="^(Horse Reset Stats)$"
   enabled="y"
   ignore_case="y"
   regexp="y"
   sequence="30"
  >
  </alias>
	  <alias
   script="MyHorseStatsResetHandler"
   match="^(Horse Reset Handler)$"
   enabled="y"
   ignore_case="y"
   regexp="y"
   sequence="30"
  >
  </alias>
	  <alias
   script="MyHorseStatsResetCharge"
   match="^(Horse Reset Charge)$"
   enabled="y"
   ignore_case="y"
   regexp="y"
   sequence="30"
  >
  </alias>
	  <alias
   script="HorseHelp"
   match="^(HorseHelp|Horse Help)$"
   enabled="y"
   ignore_case="y"
   regexp="y"
   sequence="30"
  >
  </alias>
	  <alias
   script="HorseStableStatus"
   match="^Stabled$"
   enabled="y"
   ignore_case="y"
   regexp="y"
   sequence="30"
  >
  </alias>

	  <alias
   script="checktable"
   match="^Check StableTable$"
   enabled="y"
   ignore_case="y"
   regexp="y"
   sequence="30"
  >
  </alias>
</aliases>

<script>
<![CDATA[
require "serialize"
stabletable = {}

-- Do this when the plugin is loaded
function OnPluginInstall () 
	assert (loadstring (GetVariable ("stabletable") or "")) ()
	ColourNote("orange","", "Horse tracker has been installed. Use 'Horse Help' to view list of commands.")
end -- function OnPluginInstall

----------------------------------This bit stolen from Quow's mindspace plugin----------------------------------
-- See if we can find out who we are from the CowBar since we won't know who we are on plugin-launch
sCurrentCharacter = ""
if (PluginSupports("bfe35205f026786ea1d56e3b", "CheckCharacterName") == 0) then
  iReturnCode, sCurrentCharacter = CallPlugin ("bfe35205f026786ea1d56e3b", "CheckCharacterName", "")
  sCurrentCharacter = string.lower(sCurrentCharacter)
end
if (sCurrentCharacter == nil or sCurrentCharacter == "") then
  -- We still aren't sure who this is, maybe try load our previously-loaded name, then?
  local sPossibleName = GetVariable("sCurChar")
  if (sPossibleName ~= nil and sPossibleName ~= "") then
    sCurrentCharacter = sPossibleName
    sPossibleName = nil
  else
    -- Final fallback, call ourselves "NoName"
    sCurrentCharacter = "NoName"
  end
end
-- And quickly save to file who we are, for plugin reloads after this
SetVariable("sCurChar", sCurrentCharacter)

-- See if we can find out our guild/order from the CowBar
sCurrentGuild, sCurrentSpec = "", ""
if (PluginSupports("bfe35205f026786ea1d56e3b", "CheckGuildSpec") == 0) then
  iReturnCode, sCurrentGuild, sCurrentSpec = CallPlugin ("bfe35205f026786ea1d56e3b", "CheckGuildSpec", "")
  sCurrentGuild = string.lower(sCurrentGuild)
  sCurrentSpec = string.lower(sCurrentSpec)
end

-- In case the CowBar wasn't loaded before this plugin was, let the CowBar prepare us...
function UpdateMySupports()
  if (PluginSupports("bfe35205f026786ea1d56e3b", "CheckCharacterName") == 0) then
    iReturnCode, sCurrentCharacter = CallPlugin ("bfe35205f026786ea1d56e3b", "CheckCharacterName", "")
    sCurrentCharacter = string.lower(sCurrentCharacter)
  end
  if (sCurrentCharacter == nil or sCurrentCharacter == "") then
    -- We still aren't sure who this is, maybe try load our previously-loaded name, then?
    local sPossibleName = GetVariable("sCurChar")
    if (sPossibleName ~= nil and sPossibleName ~= "") then
      sCurrentCharacter = sPossibleName
      sPossibleName = nil
    else
      -- Final fallback, call ourselves "NoName"
      sCurrentCharacter = "NoName"
    end
  end
  -- And quickly save to file who we are, for plugin reloads after this
  SetVariable("sCurChar", sCurrentCharacter)
  -- See if we can find out our guild/order from the CowBar
  sCurrentGuild, sCurrentSpec = "", ""
  if (PluginSupports("bfe35205f026786ea1d56e3b", "CheckGuildSpec") == 0) then
    iReturnCode, sCurrentGuild, sCurrentSpec = CallPlugin ("bfe35205f026786ea1d56e3b", "CheckGuildSpec", "")
    sCurrentGuild = string.lower(sCurrentGuild)
    sCurrentSpec = string.lower(sCurrentSpec)
  end
end
----------------------------------end of stolen content from Quow's mindspace plugin----------------------------

-- Check if we exist in the table
function checktable ()
	UpdateMySupports()
	if stabletable[sCurrentCharacter] == nil then
		ColourNote("orange","","It doesn't look like " .. sCurrentCharacter .. " is in the horse datatbase, lets add you now.")
		stabletable[sCurrentCharacter] = "Owner"
		stabletable[sCurrentCharacter .. "_Horse"] = "-"
		stabletable[sCurrentCharacter .. "_Colour"] = "-"
		stabletable[sCurrentCharacter .. "_Stabled"] = "may or may not be stabled."
		MyHorseStatsResetAll ()
	end
end -- function checktable

-- register your horses name
function HorseNameFinder ()
	UpdateMySupports()
	EnableTrigger("HorseName", true)  -- enable trigger
	SendNoEcho ("glance my mount")
end -- function HorseNameFinder

-- register your horses name
function ID_Horse (sName, sLine, wildcards)
	checktable ()
	Owner = tostring(sCurrentCharacter .. "_Horse")
	Colour = tostring(sCurrentCharacter .. "_Colour")
	Horse = tostring(wildcards.HorseName)
	HorseColour = tostring(wildcards.HorseColour)
	stabletable[Owner] = Horse
	stabletable[Colour] = HorseColour
	EnableTrigger("HorseName", false)  -- disable trigger
	ColourNote("orange","", "Your horse has been identified as " .. stabletable[sCurrentCharacter .. "_Horse"] .. " the " .. stabletable[sCurrentCharacter .. "_Colour"] .. " horse.")
end -- function ID_Horse

-- Display the contents of the stable table
function StableShowList ()
	checktable ()
	if type(stabletable) == 'table' then

	ColourNote("orange","","Owner" .. "\t\t" ..  "Horse")
		for k,v in pairs(stabletable) do
		if string.match(k, "_Horse") then
		s = string.gsub(k,"_Horse","")
	            ColourNote("orange","",s .. "\t" .. v)
		end
	end
	else
		ColourNote("orange","","No Table to display!")
	end
end -- function StableShowList

-- List the Helpfile
function HorseHelp ()
	ColourNote("orange","", "A list of commands used in the Horse Tracker plugin")
	ColourNote("orange","", "")
	ColourNote("orange","", "'ID Mount'\t\tRecord your horses name into the database.")
	ColourNote("orange","", "'Stable List'\t\tView your alts and their horses.")
	ColourNote("orange","", "'Horse Stats'\t\tView statistics for your current character.")
	ColourNote("orange","", "'Horse Stats [player]'\tView statistics for a specific character.")
	ColourNote("orange","", "'Stabled'\t\tShow if your horse is stabled or not.")
	ColourNote("orange","", "'Horse Reset Stats'\tReset all data.")
	ColourNote("orange","", "'Horse Reset Handler'\tReset handler data.")
	ColourNote("orange","", "'Horse Reset Charge'\tReset charge data.")
end -- function HorseHelp

-- Reset All Horse Statistics
function MyHorseStatsResetAll ()
	DefaultHandlerValues ()
	DefaultChargeValues ()
	ColourNote("orange","", "Horse tracker has been reset")
end -- function MyHorseStatsResetAll

-- Reset Only Handler Statistics
function MyHorseStatsResetHandler ()
	DefaultHandlerValues ()
	ColourNote("orange","", "Horse tracker Handler data has been reset")
end -- function MyHorseStatsResetHandler

-- Reset Only Charge Statistics
function MyHorseStatsResetCharge ()
	DefaultChargeValues ()
	ColourNote("orange","", "Horse tracker Charge data has been reset")
end -- function MyHorseStatsResetCharge 

-- Our Default Values
	-- Handler Values
function DefaultHandlerValues ()
	stabletable[sCurrentCharacter .. "_mountsuccess"] = 0
	stabletable[sCurrentCharacter .. "_mountfail"] = 0
	stabletable[sCurrentCharacter .. "_mountratio"] = "-"

	stabletable[sCurrentCharacter .. "_stashsuccess"] = 0
	stabletable[sCurrentCharacter .. "_stashfail"] = 0
	stabletable[sCurrentCharacter .. "_stashratio"] = "-"

	stabletable[sCurrentCharacter .. "_leadsuccess"] = 0
	stabletable[sCurrentCharacter .. "_leadfail"] = 0
	stabletable[sCurrentCharacter .. "_leadratio"] = "-"

	stabletable[sCurrentCharacter .. "_groomsuccess"] = 0
	stabletable[sCurrentCharacter .. "_groomfail"] = 0
	stabletable[sCurrentCharacter .. "_groomratio"] = "-"

	stabletable[sCurrentCharacter .. "_dresssuccess"] = 0
	stabletable[sCurrentCharacter .. "_dressfail"] = 0
	stabletable[sCurrentCharacter .. "_dressratio"] = "-"

	stabletable[sCurrentCharacter .. "_ridesuccess"] = 0
	stabletable[sCurrentCharacter .. "_ridefail"] = 0
	stabletable[sCurrentCharacter .. "_rideratio"] = "-"

	stabletable[sCurrentCharacter .. "_tipsuccess"] = 0
	stabletable[sCurrentCharacter .. "_tipfail"] = 0
	stabletable[sCurrentCharacter .. "_tipratio"] = "-"

	stabletable[sCurrentCharacter .. "_falloff"] = 0

	stabletable[sCurrentCharacter .. "_doorframe"] = 0

	stabletable[sCurrentCharacter .. "_wanderoff"] = 0
end -- function DefaultHandlerValues

	-- Charge Values
function DefaultChargeValues ()
	stabletable[sCurrentCharacter .. "_chargesuccesswalk" ] = 0
	stabletable[sCurrentCharacter .. "_chargefailwalk"] = 0
	stabletable[sCurrentCharacter .. "_chargewalkratio"] = "-"

	stabletable[sCurrentCharacter .. "_chargesuccesstrot" ] = 0
	stabletable[sCurrentCharacter .. "_chargefailtrot"] = 0
	stabletable[sCurrentCharacter .. "_chargetrotratio"] = "-"

	stabletable[sCurrentCharacter .. "_chargesuccesscanter" ] = 0
	stabletable[sCurrentCharacter .. "_chargefailcanter"] = 0
	stabletable[sCurrentCharacter .. "_chargecanterratio"] = "-"

	stabletable[sCurrentCharacter .. "_chargesuccessgallop" ] = 0
	stabletable[sCurrentCharacter .. "_chargefailgallop"] = 0
	stabletable[sCurrentCharacter .. "_chargegallopratio"] = "-"
end -- function DefaultChargeValues

-- Function for Horse Naming
function NameMyHorse (sName, sline, wildcards)
	checktable ()
	s = string.gsub(sName,"Horse_","")
	if string.match(s, "Named") then
		stabletable[sCurrentCharacter .. "_Horse"] = tostring(wildcards.HorseName)
	else
		stabletable[sCurrentCharacter .. "_Horse"] = "Unnamed"
	end
end -- function NameMyHorse 

-- Function for Horse Stabling
function StableHorse (sName, sline, wildcards)
	checktable ()
	s = string.gsub(sName,"Horse_","")
	if string.match(s, "Stabled") then
		stabletable[sCurrentCharacter .. "_Stabled"] = "currently stabled."
	else
		stabletable[sCurrentCharacter .. "_Stabled"] = "not in any stable."
	end
end -- function StableHorse

-- Function for Horse Handling
function HorseHandler (sName, sline, wildcards)
	checktable ()
	s = string.gsub(sName,"success","")
	s = string.gsub(s,"fail","")

	Result = tostring(sCurrentCharacter .. "_" .. sName)

	stabletable[Result] = stabletable[Result]+1

	if (string.match(sName, "success") or string.match(sName, "fail")) then
	Ratio = tostring(sCurrentCharacter .. "_" .. s .. "ratio")
	Success = tostring(sCurrentCharacter .. "_" .. s .. "success")
	Fail = tostring(sCurrentCharacter .. "_" .. s .. "fail")
	stabletable[Ratio] = tostring(math.floor((( stabletable[Success] /  ( stabletable[Success] + stabletable[Fail]) ) *100)+0.5)) .. "%"
	end
end -- function HorseHandler


-- Function for Charge/Storm
function HorseChargeHandler (sName, sline, wildcards)
	checktable ()
	Result = tostring(sCurrentCharacter .. "_" .. sName .. wildcards[3])

	stabletable[Result] = stabletable[Result] + 1

	Ratio = tostring(sCurrentCharacter .. "_" .. "charge" .. wildcards[3] .. "ratio")
	Success = tostring(sCurrentCharacter .. "_" .. "chargesuccess" .. wildcards[3])
	Fail = tostring(sCurrentCharacter .. "_" .. "chargefail" .. wildcards[3])

	stabletable[Ratio] = tostring(math.floor((( stabletable[Success] /  ( stabletable[Success] + stabletable[Fail]) ) *100)+0.5)) .. "%"
end -- function HorseChargeHandler

-- Messages sent to the Mud
function HorseStableStatus ()
	checktable ()
ColourNote("orange","", stabletable[sCurrentCharacter .. "_Horse"] .. " the " .. stabletable[sCurrentCharacter .. "_Colour"] .. " horse is " .. stabletable[sCurrentCharacter .. "_Stabled"] )
end -- function HorseStableStatus 

function MyHorseStats (sName, sLine, wildcards)
	checktable ()

	if (wildcards.Player) ~= "" then
		My_ID = tostring(wildcards.Player .. "_")
		ID_Check = tostring(wildcards.Player)
		else	
		My_ID = tostring(sCurrentCharacter .. "_")
		ID_Check = tostring(sCurrentCharacter)
	end
	
	if stabletable[ID_Check] == nil then
		ColourNote("orange","", "No records found for " .. ID_Check .. ".")
	else
    
	if stabletable[My_ID.. "Horse"] == "-" then
   	ColourNote("orange","", "No registered horse, please use 'ID Mount' to update records.")
	else
   	ColourNote("orange","", stabletable[My_ID.. "Horse"] .. " the " .. stabletable[My_ID .. "Colour"] .. " horse.")
	end
    ColourNote("orange","", "Mount:          Success: " .. stabletable[My_ID .. "mountsuccess"]  .. "\tFail: ".. stabletable[My_ID .. "mountfail"] .. " \t(" .. stabletable[My_ID .. "mountratio"] .. ")")
    ColourNote("orange","", "Stash/Retrieve: Success: " .. stabletable[My_ID .. "stashsuccess"] .. "\tFail: ".. stabletable[My_ID .. "stashfail"] .. " \t(" .. stabletable[My_ID .. "stashratio"] .. ")")
    ColourNote("orange","", "Lead:           Success: " .. stabletable[My_ID .. "leadsuccess"] .. "\tFail: ".. stabletable[My_ID .. "leadfail"] .. " \t(" .. stabletable[My_ID .. "leadratio"] .. ")")
    ColourNote("orange","", "Groom:          Success: " .. stabletable[My_ID .. "groomsuccess"] .. "\tFail: ".. stabletable[My_ID .. "groomfail"] .. " \t(" .. stabletable[My_ID .. "groomratio"] .. ")")
    ColourNote("orange","", "Dress:          Success: " .. stabletable[My_ID .. "dresssuccess"] .. "\tFail: ".. stabletable[My_ID .. "dressfail"] .. " \t(" .. stabletable[My_ID .. "dressratio"] .. ")")
    ColourNote("orange","", "Riding:         Success: " .. stabletable[My_ID .. "ridesuccess"] .. "\tFail: ".. stabletable[My_ID .. "ridefail"] .. " \t(" .. stabletable[My_ID .. "rideratio"] .. ")")
    ColourNote("orange","", "Resist tipped:  Success: " .. stabletable[My_ID .. "tipsuccess"] .. "\tFail: ".. stabletable[My_ID .. "tipfail"] .. " \t(" .. stabletable[My_ID .. "tipratio"] .. ")")
    ColourNote("orange","", "You have fallen off " .. stabletable[My_ID .. "falloff"] .. " times")
    ColourNote("orange","", "You have ridden into " .. stabletable[My_ID .. "doorframe"] .. " doorframes")
    ColourNote("orange","", "Your horse has wandered off " .. stabletable[My_ID .. "wanderoff"] .. " times")
    ColourNote("orange","", "Charge/Storm")
    ColourNote("orange","", "Walk:           Success: " .. stabletable[My_ID .. "chargesuccesswalk"] .. "\tFail: " .. stabletable[My_ID .. "chargefailwalk"] .. " \t(" .. stabletable[My_ID .. "chargewalkratio"] .. ")")
    ColourNote("orange","", "Trot:           Success: " .. stabletable[My_ID .. "chargesuccesstrot"] .. "\tFail: " .. stabletable[My_ID .. "chargefailtrot"] .. " \t(" .. stabletable[My_ID .. "chargetrotratio"] .. ")")
    ColourNote("orange","", "Canter:         Success: " .. stabletable[My_ID .. "chargesuccesscanter"] .. "\tFail: " .. stabletable[My_ID .. "chargefailcanter"] .. " \t(" .. stabletable[My_ID .. "chargecanterratio"] .. ")")
    ColourNote("orange","", "Gallop:         Success: " .. stabletable[My_ID .. "chargesuccessgallop"] .. "\tFail: " .. stabletable[My_ID .. "chargefailgallop"] .. " \t(" .. stabletable[My_ID .. "chargegallopratio"] .. ")")
	
    end
end -- function MyHorseStats 

function OnPluginSaveState ()
	SetVariable ("stabletable","stabletable = " .. serialize.save_simple(stabletable))
end -- function OnPluginSaveState

-- Save the table when the plugin closes
function OnPluginClose ()
	SetVariable ("stabletable","stabletable = " .. serialize.save_simple(stabletable))
end -- function OnPluginClose

]]>
</script> 
</muclient>
