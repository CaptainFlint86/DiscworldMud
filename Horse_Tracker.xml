<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Horse_Tracker"
   author="Proeliator"
   id="1a51e592868f18f275a46619"
   language="Lua"
   purpose="Track the success/failure of horse usage"
   date_written="2022-11-21 10:05:30"
   save_state="y"
   requires="5.06"
   version="1.7"
   >
</plugin>

<!--  Aliases  -->
<aliases>
  <alias
   script="MyHorseStats"
   match="HorseStats"
   enabled="y"
   ignore_case="y"
   sequence="30"
  >
  </alias>
  <alias
   script="MyHorseStatsResetAll"
   match="HorseStatsReset"
   enabled="y"
   ignore_case="y"
   sequence="30"
  >
  </alias>
	  <alias
   script="MyHorseStatsResetHandler"
   match="HorseHandlerReset"
   enabled="y"
   ignore_case="y"
   sequence="30"
  >
  </alias>
	  <alias
   script="MyHorseStatsResetCharge"
   match="HorseChargeReset"
   enabled="y"
   ignore_case="y"
   sequence="30"
  >
  </alias>
</aliases>
-- Many Many Triggers
<!--  Triggers  -->
<triggers>
  <trigger
   enabled="y"
   keep_evaluating="y"
   match="You mount .+the .+horse."
   omit_from_output="n"
   sequence="18"
   regexp="y"
   script="HorseHandler"
   name="mountsuccess"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="You try to climb onto .+horse, but .+easily shakes you off and you land with a thump on the ground."
   omit_from_output="n"
   sequence="19"
   regexp="y"
   script="HorseHandler"
   name="mountfail"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="You .+ horse's pair of brown leather saddlebags."
   omit_from_output="n"
   sequence="20"
   regexp="y"
   script="HorseHandler"
   name="stashsuccess"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="You try to access .+ horse's saddlebag and promptly get kicked for your trouble."
   omit_from_output="n"
   sequence="21"
   regexp="y"
   script="HorseHandler"
   name="stashfail"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="You try to convince .+ horse to follow you, but .+ is having none of it."
   omit_from_output="n"
   sequence="22"
   regexp="y"
   script="HorseHandler"
   name="leadfail"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match=".+ horse starts to follow you."
   omit_from_output="n"
   sequence="23"
   regexp="y"
   script="HorseHandler"
   name="leadsuccess"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="You dress .+ horse with the"
   omit_from_output="n"
   sequence="23"
   regexp="y"
   script="HorseHandler"
   name="dresssuccess"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="You try to dress .+ horse with the "
   omit_from_output="n"
   sequence="23"
   regexp="y"
   script="HorseHandler"
   name="dressfail"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="You approach .+ horse, preparing to groom"
   omit_from_output="n"
   sequence="23"
   regexp="y"
   script="HorseHandler"
   name="groomsuccess"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="You pick out a brush and have a go at .+ horse's .+ with it"
   omit_from_output="n"
   sequence="23"
   regexp="y"
   script="HorseHandler"
   name="groomfail"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match="You mess up the rhythm of your riding and are promptly tossed off .+ horse onto the ground."
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="falloff"
  >
  </trigger>

<trigger
   enabled="y"
   keep_evaluating="y"
   match=".+ horse seems to get bored of following you and wanders off."
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="wanderoff"
  >
  </trigger>	
	
<trigger
   enabled="y"
   keep_evaluating="y"
   match="You tell .+ horse to take you to .+ and .+ starts off at a trot."
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="ridesuccess"
  >
  </trigger>
	
<trigger
   enabled="y"
   keep_evaluating="y"
   match="You tell .+ horse to take you to .+, but .+ seems unwilling to move."
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="ridefail"
  >
  </trigger>	

<trigger
   enabled="y"
   keep_evaluating="y"
   match=".+ you, almost unseating you from the .+ horse."
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="tipsuccess1"
  >
  </trigger>	
	
<trigger
   enabled="y"
   keep_evaluating="y"
   match=".+ you, slightly unseating you from the .+ horse before you regain your balance."
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="tipsuccess2"
  >
  </trigger>
	 
<trigger
   enabled="y"
   keep_evaluating="y"
   match=".+ off the .+ horse, sending you crashing to the ground."
   omit_from_output="n"
   sequence="24"
   regexp="y"
   script="HorseHandler"
   name="tipfail"
  >
  </trigger>	
	
<trigger
   enabled="y"
   keep_evaluating="n"
   match="You hunch down over .+ horse and spur .+ into a (\w*) at the"
   omit_from_output="n"
   sequence="25"
   regexp="y"
   script="HorseChargeHandler"
   name="chargesuccess"
  >
  </trigger>
	
<trigger
   enabled="y"
   keep_evaluating="n"
   match="You hunch down over .+ horse and try to spur .+ into a (\w*) at the"
   omit_from_output="n"
   sequence="26"
   regexp="y"
   script="HorseChargeHandler"
   name="chargefail"
  >
  </trigger>
</triggers>

<script>
<![CDATA[
-- Lets load our variables from Mush

--Variables used for retrieving/storing/reseting values
	VarHNames = {'mount', 'stash', 'lead', 'dress', 'groom', 'ride', 'tip'}
	VarXNames = {'falloff', 'wanderoff'}
	VarCNames = {'walk', 'trot', 'canter', 'gallop'}
function LoadVariables ()
-- Handling Variables
	for i, VarHName in ipairs(VarHNames) do
		_G['i' .. VarHName .. 'success'] = tonumber(GetVariable("i" .. VarHName .. "success")) or 0
		_G['i' .. VarHName .. 'fail'] = tonumber(GetVariable("i" .. VarHName .. "fail")) or 0
		_G['i' .. VarHName .. 'ratio'] = tostring(GetVariable("i" .. VarHName .. "ratio") or "-")
	end
-- Handling Variables that don't have a fail ratio
	for i, VarXName in ipairs(VarXNames) do
		_G['i' .. VarXName] = tonumber(GetVariable("i" .. VarXName)) or 0
	end
-- Charge Variables
	for i, VarCName in ipairs(VarCNames) do
		_G['ichargesuccess' .. VarCName] = tonumber(GetVariable("ichargesuccess" .. VarCName)) or 0
		_G['ichargefail' .. VarCName] = tonumber(GetVariable("ichargefail" .. VarCName)) or 0
		_G['icharge' .. VarCName .. 'ratio'] = tostring(GetVariable("icharge" .. VarCName .. "ratio") or "-")
	end
end

-- When Plugin is installed
function OnPluginInstall ()
ColourNote("orange","", "Horse tracker has been installed. Use 'HorseStats' to see statistics.")
ColourNote("orange","", "'HorseStatsReset' will reset all data.")
ColourNote("orange","", "'HorseHandlerReset' will reset handler data.")
ColourNote("orange","", "'HorseChargeReset' will reset charge data.")
LoadVariables ()
end

-- Reset All Horse Statistics
function MyHorseStatsResetAll ()
DefaultHandlerValues ()
DefaultChargeValues ()
ColourNote("orange","", "Horse tracker has been reset")
end
-- Reset Only Handler Statistics
function MyHorseStatsResetHandler ()
DefaultHandlerValues ()
ColourNote("orange","", "Horse tracker Handler data has been reset")
end
-- Reset Only Charge Statistics
function MyHorseStatsResetCharge ()
DefaultChargeValues ()
ColourNote("orange","", "Horse tracker Charge data has been reset")
end

-- Our Default Values
	-- Handler Values
function DefaultHandlerValues ()
	for i, VarHName in ipairs(VarHNames) do
		_G['i' .. VarHName .. 'success'] = 0
		_G['i' .. VarHName .. 'fail'] = 0
		_G['i' .. VarHName .. 'ratio'] = "-"
	end

	for i, VarXName in ipairs(VarXNames) do
		_G['i' .. VarXName] = 0
	end
end
	-- Charge Values
function DefaultChargeValues ()
	for i, VarCName in ipairs(VarCNames) do
		_G['ichargesuccess' .. VarCName] = 0
		_G['ichargefail' .. VarCName] = 0
		_G['icharge' .. VarCName .. 'ratio'] = "-"
	end
end

-- Function for Horse Handling
function HorseHandler (sName, sline, wildcards)
	s = string.gsub(sName,"success","")
	s = string.gsub(s,"fail","")

	if string.match(s,"%d") then
	s = string.gsub(s,"%d","")
	sName = string.gsub(sName,"%d","")
	end

	_G['i' .. sName] = _G['i' .. sName] + 1

	if (string.match(sName, "success") or string.match(sName, "fail")) then
	_G['i' .. s .. 'ratio'] = tostring(math.floor((( _G['i'..s..'success'] /  ( _G['i'..s..'success'] + _G['i'..s..'fail'] ) ) *100)+0.5)) .. "%"
	end
end

-- Function for Charge/Storm
function HorseChargeHandler (sName, sline, wildcards)
	_G['i'..sName .. wildcards[1]] = _G['i' .. sName .. wildcards[1]] + 1
	_G['icharge' .. wildcards[1] .. 'ratio'] = tostring(math.floor((( _G['ichargesuccess' .. wildcards[1]] /( _G['ichargesuccess' .. wildcards[1]] + _G['ichargefail' .. wildcards[1]] ))*100)+0.5)) .. "%"
end

-- Messages sent to the Mud
function MyHorseStats ()
    ColourNote("orange","", "Mount:          Success: " .. imountsuccess .. "\tFail: ".. imountfail .. " \t(" .. imountratio .. ")")
    ColourNote("orange","", "Stash/Retrieve: Success: " .. istashsuccess .. "\tFail: ".. istashfail .. " \t(" .. istashratio .. ")")
    ColourNote("orange","", "Lead:           Success: " .. ileadsuccess .. "\tFail: ".. ileadfail .. " \t(" .. ileadratio .. ")")
    ColourNote("orange","", "Groom:          Success: " .. igroomsuccess .. "\tFail: ".. igroomfail .. " \t(" .. igroomratio .. ")")
    ColourNote("orange","", "Dress:          Success: " .. idresssuccess .. "\tFail: ".. idressfail .. " \t(" .. idressratio .. ")")
    ColourNote("orange","", "Riding:         Success: " .. iridesuccess .. "\tFail: ".. iridefail .. " \t(" .. irideratio .. ")")
    ColourNote("orange","", "Resist tipped:  Success: " .. itipsuccess .. "\tFail: ".. itipfail .. " \t(" .. itipratio .. ")")
    ColourNote("orange","", "You have fallen off " .. ifalloff .. " times")
    ColourNote("orange","", "Your horse has wandered off " .. iwanderoff .. " times")
    ColourNote("orange","", "Charge/Storm")
    ColourNote("orange","", "Walk:           Success: " .. ichargesuccesswalk .. "\tFail: ".. ichargefailwalk .. " \t(" .. ichargewalkratio .. ")")
    ColourNote("orange","", "Trot:           Success: " .. ichargesuccesstrot .. "\tFail: ".. ichargefailtrot .. " \t(" .. ichargetrotratio .. ")")
    ColourNote("orange","", "Canter:         Success: " .. ichargesuccesscanter .. "\tFail: ".. ichargefailcanter .. " \t(" .. ichargecanterratio .. ")")
    ColourNote("orange","", "Gallop:         Success: " .. ichargesuccessgallop .. "\tFail: ".. ichargefailgallop .. " \t(" .. ichargegallopratio .. ")")
end


-- Save variables when session closed
function OnPluginClose ()
	-- Handling Variables
	for i, VarHName in ipairs(VarHNames) do
		SetVariable("i" .. VarHName .. "success", tostring(_G['i' .. VarHName .. 'success']))
		SetVariable("i" .. VarHName .. "fail", tostring(_G['i' .. VarHName .. 'fail']))
		SetVariable("i" .. VarHName .. "ratio", tostring(_G['i' .. VarHName .. 'ratio']))
	end
	-- Handling Variables that don't have a fail ratio
	for i, VarXName in ipairs(VarXNames) do
		SetVariable("i" .. VarXName, tostring(_G['i' .. VarXName]))
	end
	-- Charge Variables
	for i, VarCName in ipairs(VarCNames) do
		SetVariable("ichargesuccess" .. VarCName, tostring(_G['ichargesuccess' .. VarCName]))
		SetVariable("ichargefail" .. VarCName, tostring(_G['ichargefail' .. VarCName]))
		SetVariable("icharge" .. VarCName .. "ratio", tostring(_G['icharge' .. VarCName .. 'ratio']))
	end
end
  
]]>
</script> 
</muclient>
